data Param {
	char value[]
}

data Request {
	char functionName[]
	int numParams
	Param params[]
}

data Response {
	// 1 OK - 2 FAILED
	byte status
	// if it's null or "" this has to be translated to null
	char value[]
}

data IPAddr {
	char ip[]
	int port
}

data Int {
	int i
}
data ShardState {
	Int state[]
}

/* Available list operations */
const char ADD[]          = "add"
const char GET_LENGTH[]   = "getLength"
const char GET_CONTENTS[] = "getContents"
const char CLEAR_LIST[]   = "clearList"

/* IPs */
const char LOCALHOST[] = "localhost"

component provides List:heap(Destructor, AdaptEvents) requires data.json.JSONEncoder parser,
	net.TCPSocket, data.StringUtil strUtil, io.Output out, data.IntUtil iu, hash.Multiplicative hash
{
	IPAddr remoteDistsIps[] = null
	IPAddr remoteListsIps[] = null
	int toggleContents = 1

	void setupRemoteDistsIPs() {
		if (remoteDistsIps == null) {
			remoteDistsIps = new IPAddr[2]
			remoteDistsIps[0] = new IPAddr()
			remoteDistsIps[0].ip = new char[](LOCALHOST)
			remoteDistsIps[0].port = 8081
			remoteDistsIps[1] = new IPAddr()
			remoteDistsIps[1].ip = new char[](LOCALHOST)
			remoteDistsIps[1].port = 8082
		}
	}

	void setupRemoteListsIPs() {
		if (remoteListsIps == null) {
			remoteListsIps = new IPAddr[2]
			remoteListsIps[0] = new IPAddr()
			remoteListsIps[0].ip = new char[](LOCALHOST)
			remoteListsIps[0].port = 2010
			remoteListsIps[1] = new IPAddr()
			remoteListsIps[1].ip = new char[](LOCALHOST)
			remoteListsIps[1].port = 2011
		}
	}

	Response parseResponse(char content[]) {
		String helper[] = strUtil.explode(content, "!")
		Response response
		if (helper.arrayLength > 1) {
			response = parser.jsonToData(helper[0].string, typeof(Response), null)
			Response response2 = new Response()
			response2.value = helper[1].string
			response2.status = response.status
			response = response2
		} else {
			response = parser.jsonToData(content, typeof(Response), null)
		}
		return response
	}

	Response readResponse(TCPSocket s) {
		Response response = null
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++
			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\r") &&
					(command[len-2] == "\r") && (command[len-1] == "\r")) {
					response = parseResponse(strUtil.subString(command,
						0, command.arrayLength-4))
					break
				}
			}
		}
		if (response == null) { s.disconnect() }
		return response
	}

	bool establishConnection(IPAddr addr, TCPSocket remoteObj) {
		if (!remoteObj.connect(addr.ip, addr.port)) {
			out.println("Connection error!")
			return false
		}
		return true
	}

	Response makeRequestSharding(IPAddr addr, char content[], bool readResponse) {
	TCPSocket remoteObj = new TCPSocket()
		Response resp = null
		if (establishConnection(addr, remoteObj)) {
			remoteObj.send(content)
			if (readResponse) { resp = readResponse(remoteObj) }
			remoteObj.disconnect()
		}
		return resp
	}

	void List:add (store Data item) {
		Request request = new Request()
		request.functionName = ADD
		request.numParams = 1

		char requestStr[] = parser.jsonFromData(request, null)
		char param[] = parser.jsonFromData(item, null)
		char content2[] = new char[](requestStr, "!", param, "\r\r\r\r")

		setupRemoteListsIPs()
		Int num = item
		IPAddr addr = remoteListsIps[hash.h(num.i, remoteListsIps.arrayLength)]
		makeRequestSharding(addr, content2, false)
	}

	void List:remove (Data item) {
		Request request = new Request()
		request.functionName = "remove"
		request.numParams = 1

		char requestStr[] = parser.jsonFromData(request, null)
		char param[] = parser.jsonFromData(item, null)
		char content2[] = new char[](requestStr, "!", param, "\r\r\r\r")

		setupRemoteListsIPs()
		Int num = item
		IPAddr addr = remoteListsIps[hash.h(num.i, remoteListsIps.arrayLength)]
		makeRequestSharding(addr, content2, false)
	}

	void List:update (Data item, store Data newVersion) {
		Request request = new Request()
		request.functionName = "update"
		request.numParams = 2

		char requestStr[] = parser.jsonFromData(request, null)
		char param[] = parser.jsonFromData(item, null)
		char content2[] = new char[](requestStr, "!", param, "\r\r\r\r")

		setupRemoteListsIPs()
		Int num = item
		IPAddr addr = remoteListsIps[hash.h(num.i, remoteListsIps.arrayLength)]
		makeRequestSharding(addr, content2, false)
	}

	void List:setIndex (int n, store Data d) {
	}

	Data List:getFirst () {
		Request request = new Request()
		request.functionName = "getFirst"
		request.numParams = 0

		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		setupRemoteListsIPs()
		Int contents[] = null
		for (int i = 0; i < remoteListsIps.arrayLength; i++) {
			Response response = makeRequestSharding(remoteListsIps[i], content2, true)
			Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
			contents = new Int[](contents, nums)
		}
		return null
	}

	int List:getLength () {
		Request request = new Request()
		request.functionName = "getLength"
		request.numParams = 0

		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		setupRemoteListsIPs()
		Int contents[] = null
		for (int i = 0; i < remoteListsIps.arrayLength; i++) {
			Response response = makeRequestSharding(remoteListsIps[i], content2, true)
			Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
			contents = new Int[](contents, nums)
		}
		return 0
	}

	Data[] List:getContents (opt Type t) {
		/*Request request = new Request()
		request.functionName = GET_CONTENTS
		request.numParams = 0

		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		setupRemoteListsIPs()
		Int contents[] = null
		for (int i = 0; i < remoteListsIps.arrayLength; i++) {
			Response response = makeRequestSharding(remoteListsIps[i], content2, true)
			Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
			contents = new Int[](contents, nums)
		}
		return contents*/

		Request request = new Request()
		request.functionName = GET_CONTENTS
		request.numParams = 0

		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		setupRemoteListsIPs()
		Int contents[] = null

		if (toggleContents == 1) { toggleContents = 2 }
		else { toggleContents = 1 }
		
		IPAddr addr = remoteListsIps[hash.h(toggleContents, remoteListsIps.arrayLength)]
		Response response = makeRequestSharding(addr, content2, true)
		Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
		contents = new Int[](contents, nums)

		return contents
	}

	Data List:getNext () {
		Request request = new Request()
		request.functionName = "getNext"
		request.numParams = 0

		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		setupRemoteListsIPs()
		Int contents[] = null
		for (int i = 0; i < remoteListsIps.arrayLength; i++) {
			Response response = makeRequestSharding(remoteListsIps[i], content2, true)
			Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
			contents = new Int[](contents, nums)
		}
		return null
	}

	bool List:isEnd () {
		Request request = new Request()
		request.functionName = "isEnd"
		request.numParams = 0

		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		setupRemoteListsIPs()
		Int contents[] = null
		for (int i = 0; i < remoteListsIps.arrayLength; i++) {
			Response response = makeRequestSharding(remoteListsIps[i], content2, true)
			Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
			contents = new Int[](contents, nums)
		}
		return false
	}

	Data List:getIndex (int n) {
		Request request = new Request()
		request.functionName = "getIndex"
		request.numParams = 1

		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		setupRemoteListsIPs()
		Int contents[] = null
		for (int i = 0; i < remoteListsIps.arrayLength; i++) {
			Response response = makeRequestSharding(remoteListsIps[i], content2, true)
			Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
			contents = new Int[](contents, nums)
		}
		return null
	}


	void buildFromArray(Data items[]) {
		// TODO
	}

	bool List:clone(Object o) {
		// TODO
		return false
	}

	void clearList() {
		// TODO
	}

	void Destructor:destroy() {
	}

	void AdaptEvents:inactive() {
		if (content != null) {
			content = getContents()
			char msg[] = new char[]("clearList!\r\r\r\r")
			
			setupRemoteDistsIPs()
			for (int i = 0; i < remoteDistsIps.arrayLength; i++) {
				makeRequestSharding(remoteDistsIps[i], msg, true)
			}
		}
	}

	// this is extremely hardcoded! ):
	void AdaptEvents:active() {
		if (content != null) {
			setupRemoteDistsIPs()
			ShardState shardState[] = new ShardState[remoteDistsIps.arrayLength]
			Thread thread[] = new Thread[remoteDistsIps.arrayLength]
			for (int i = 0; i < content.arrayLength; i++) {
				Int num = content[i]
				int remoteIdx = hash.h(num.i, remoteDistsIps.arrayLength)
				if (shardState[remoteIdx] == null) {
					shardState[remoteIdx] = new ShardState()
				}
				shardState[remoteIdx].state = new Int[](shardState[remoteIdx].state, num)
			}
			for (int i = 0; i < remoteDistsIps.arrayLength; i++) {
				char state[] = parser.jsonFromArray(shardState[i].state, null)
				char msg[] = new char[]("../distributor/RemoteList.o!", state, "\r\r\r\r")
				thread[i] = asynch::makeRequestSharding(remoteDistsIps[i], msg, true)
			}
			for (int i = 0; i < remoteDistsIps.arrayLength; i++) {
				thread[i].join()
			}
			
		}
	}
}